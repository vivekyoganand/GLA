Objects:

Objects in Python represent real-world entities. They are instances of classes. In the "Objects" example, we create a Dog class to represent dogs. The __init__ method is a special method used to initialize the object when it's created. In this case, it sets the name attribute of the dog object.

 self is a reference to the current instance of a class. It is used to interact with instance-specific attributes and methods, making it a fundamental part of object-oriented programming in Python.

In the "Objects" and "Classes" examples, self is used within the __init__ method to refer to the instance being created. It is a convention to name this parameter self, but you can technically name it something else if you prefer. The self parameter is automatically passed to instance methods when they are called, and it allows you to set and access the attributes of the object.
====================
# Creating an object
class Dog:
    def __init__(self, name):
        self.name = name

dog1 = Dog("Buddy")
print(dog1.name)  # Output: Buddy

==================
Classes:

Classes in Python are like blueprints for creating objects. They encapsulate both data and behavior. In the "Classes" example, we define a Car class, which is a blueprint for creating car objects. The __init__ method initializes the attributes of each car object.

====================
# Creating a class
class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model

# Creating objects from the class
car1 = Car("Toyota", "Camry")
car2 = Car("Honda", "Civic")

print(car1.make, car1.model)  # Output: Toyota Camry
print(car2.make, car2.model)  # Output: Honda Civic



Encapsulation:

Encapsulation is a concept that restricts access to certain parts of an object. In Python, you can mark members as private (by using a double underscore prefix) or protected (by using a single underscore prefix). In the "Encapsulation" example, we create a BankAccount class. It demonstrates encapsulation by marking the balance attribute as private, and the account_number as protected.

In the "Encapsulation" example, self is used in the __init__ method to set the instance-specific attributes (_account_number and __balance) and in the get_balance method to access the private member (__balance). The use of self inside the class methods allows you to work with the attributes and methods specific to each instance of the class.
====================
# Encapsulation example
class BankAccount:
    def __init__(self, account_number, balance):
        self._account_number = account_number  # Protected member
        self.__balance = balance  # Private member

    def get_balance(self):
        return self.__balance

account1 = BankAccount("12345", 1000)
print(account1._account_number)  # Accessing a protected member
print(account1.get_balance())    # Accessing a private member using a method




Inheritance:

Inheritance allows you to create new classes that inherit properties and methods from existing classes. In the "Inheritance" example, we have a base class Animal with a speak method. Two subclasses, Dog and Cat, inherit from Animal and implement their own speak methods.

In the "Inheritance" example, self is used in the constructor (__init__) of each subclass (Dog and Cat) to initialize their own attributes. Additionally, it is used in the speak method of each subclass to refer to the instance and access its specific attributes.

====================
# Inheritance example
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        pass
class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"
dog = Dog("Buddy")
cat = Cat("Whiskers")
print(dog.name, dog.speak())  # Output: Buddy Woof!
print(cat.name, cat.speak())  # Output: Whiskers Meow!


Polymorphism:

#Polymorphism allows you to treat objects of different classes as objects of a common base class. In the "Polymorphism" example, we define a base class Shape with an area method, and two subclasses, Circle and Rectangle, implement their own area methods.

In the "Polymorphism" example, self is used in the methods of each class (Circle and Rectangle) to access and manipulate instance-specific attributes. It is passed automatically when you call methods on objects of those classes.


====================
# Polymorphism example
class Shape:
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

shapes = [Circle(5), Rectangle(4, 6)]

for shape in shapes:
    print(f"Area of shape is {shape.area()}")

# Output:
# Area of shape is 78.5
# Area of shape is 24
